" no compatibilty with legacy vim
set nocompatible

""""""""""
" Vundle "
""""""""""
" required for vundle
filetype off

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle
Bundle 'gmarik/vundle'

"""""""""""
" Bundles "
"""""""""""
" github repos
Bundle 'vim-scripts/YankRing.vim'
Bundle 'vim-scripts/ZoomWin'
Bundle 'ervandew/supertab'
Bundle 'scrooloose/nerdcommenter'
Bundle 'scrooloose/nerdtree'
Bundle 'gregsexton/gitv'
Bundle 'godlygeek/tabular'
Bundle 'kien/ctrlp.vim'
Bundle 'sjl/gundo.vim'
Bundle 'nathanaelkane/vim-indent-guides'
Bundle 'kchmck/vim-coffee-script'
Bundle 'hallison/vim-markdown'
Bundle 'duwanis/tomdoc.vim'
Bundle 'mileszs/ack.vim'
Bundle 'terryma/vim-multiple-cursors'
Bundle 'thoughtbot/vim-rspec'
Bundle 'heartsentwined/vim-emblem'
Bundle 'zerowidth/vim-copy-as-rtf'
Bundle 'chriskempson/base16-vim'
Bundle 'wikitopian/hardmode'
Bundle 'pangloss/vim-javascript'
Bundle 'bling/vim-airline'
Bundle 'Raimondi/delimitMate'

" make html edition work in a sane way
Bundle 'tristen/vim-sparkup'
" work with handlebars
Bundle 'nono/vim-handlebars'

"""""""""""""""""""""""""""""""""
" Tim Pope is teh vim superhero "
""""""""""""""""""""""""""""""""""
Bundle "tpope/vim-fugitive"
Bundle "tpope/vim-surround"
Bundle "tpope/vim-repeat"
Bundle "tpope/vim-haml"

"""""""""""
" /Vundle "
"""""""""""

" load file type plugins + indentation
filetype plugin indent on

" set ',' as leader
let mapleader = ","
" disable arrow keys because they make 'O' unusably slow
set noesckeys
syntax enable
set encoding=utf-8
" display incomplete commands
set showcmd
" load new files per default (e.q when git-branch was switched)
set autoread
" make backspace work like most other apps
set backspace=2

" Base 16
let base16colorspace=256 " Access colors present in 256 colorspace
set t_Co=256 " 256 color mode
set background=dark
colorscheme base16-eighties


""""""""""""""
" Whitespace "
""""""""""""""
" a tab is two spaces
set tabstop=2 shiftwidth=2
" use spaces, not tabs
set expandtab
" wrap lines
set wrap
set textwidth=79
set formatoptions=qrn1
set colorcolumn=79
" show end of lines
set list
set listchars=tab:\ \ ,trail:·,eol:~
" show linenumbers
set number


"""""""""""""
" Searching "
"""""""""""""
" highlight matches
set hlsearch 
" to show matches while typing
set incsearch
" ignore case on search
set ignorecase
" unless they contain at least one capital letter
set smartcase 

"""""""""""""""""""""
" window navigation "
"""""""""""""""""""""
" ease up window navigation
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" nice moving inside of tex files
map j gj
map k gk
map [Up] gk
map [Down] gj

" Resize splits when the window is resized
au VimResized * exe "normal! \<c-w>="

" make it easy to resize windows
map + <C-W>+
map - <C-W>-
map ö <C-W><
map ä <C-W>>

""""""""
" misc "
""""""""
" save when focus is lost
au FocusLost * :wa

" dismiss highlighted search items on leader+space
nnoremap <leader><space> :noh<cr>

" no need for swapfiles¬
set noswapfile

" f9 to turn on/off highlighting of the current line
noremap <silent><f9> :set cursorline!<cr>

""""""""""""""""""""""""
" plugin customization "
""""""""""""""""""""""""
" graphical vim undo gundo
nnoremap <F4> :GundoToggle<CR>
" close Gundo on revert
let g:gundo_close_on_revert = 1

" NERDTree customization
map <leader><TAB> :<C-U>NERDTreeToggle<CR>
let g:NERDTreeQuitOnOpen = 1

" NERDCommenter - always use one space between comment and code
let NERDSpaceDelims = 1

" show YankRing history
nnoremap <silent> <F1> :YRShow<cr>
inoremap <silent> <F1> <ESC>:YRShow<cr>

" remap ctrlp to <leader>t
let g:ctrlp_map = '<leader>t'
" ignore tmp directory for ctrlp
set wildignore+=*/tmp/*,node_modules

" make ZoomWin work on <leader>0
map <leader>0 :ZoomWin<CR>

" ack on leader+f
map <leader>f :Ack<space>

" align selected lines on '='
map <leader>9 :Tabularize/=<cr>

" for previewing markdown with the 'marked'-app on OS X
function! s:setupMarkup()
  nnoremap <leader>p :silent !open -a Marked.app '%:p'<cr>
endfunction

au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn} call s:setupMarkup()

" handle hamlbars files like haml
if has("autocmd")
  au BufNewFile,BufRead *.hamlbars set filetype=haml
endif

" easy rspec
let g:rspec_command = "!rspec --drb --color --format=doc {spec}"
map <leader>r :call RunCurrentSpecFile()<CR>
map <leader>e :call RunNearestSpec()<CR>
map <leader>w :call RunLastSpec()<CR>

" Hard Mode
nnoremap <leader>h <Esc>:call ToggleHardMode()<CR>

" Hard Mode per default
autocmd VimEnter,BufNewFile,BufReadPost * silent! call HardMode()
